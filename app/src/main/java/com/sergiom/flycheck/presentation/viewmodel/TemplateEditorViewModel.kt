package com.sergiom.flycheck.presentation.viewmodel

import android.Manifest
import android.content.ContentValues
import android.content.Context
import android.net.Uri
import android.os.Build
import android.os.Environment
import android.provider.MediaStore
import androidx.annotation.RequiresApi
import androidx.annotation.RequiresPermission
import androidx.core.content.FileProvider
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.sergiom.flycheck.R
import com.sergiom.flycheck.data.model.CheckListBlock
import com.sergiom.flycheck.data.model.CheckListSection
import com.sergiom.flycheck.data.model.CheckListTemplateModel
import com.sergiom.flycheck.domain.usecase.EditorUseCases
import com.sergiom.flycheck.ui.events.UiEvent
import com.sergiom.flycheck.util.JsonUtils
import com.sergiom.flycheck.util.NotificationHelper
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.io.File
import javax.inject.Inject

/**
 * ViewModel principal del editor de plantillas de checklist.
 * Administra el estado, l√≥gica de negocio y comunicaci√≥n con los casos de uso.
 */
@HiltViewModel
class TemplateEditorViewModel @Inject constructor(

    // Casos de uso con l√≥gica de negocio
    private val editorUseCases: EditorUseCases
) : ViewModel() {

    // Estado observable de la UI
    private val _uiState = MutableStateFlow(CheckListTemplateModel())
    val uiState: StateFlow<CheckListTemplateModel> = _uiState

    // üì¢ Flujo de eventos de UI (como mostrar un Toast)
    private val _eventFlow = MutableSharedFlow<UiEvent>()
    val eventFlow: SharedFlow<UiEvent> = _eventFlow


    // ‚ûï A√±adir un √≠tem a una secci√≥n existente del checklist.
    // Retorna true si la operaci√≥n fue exitosa, false si fall√≥.
    fun addItem(
        sectionId: String,
        title: String,
        action: String,
        infoTitle: String = "",
        infoBody: String = ""
    ): Boolean {
        // Obtiene el estado actual del template
        val current = _uiState.value

        // Llama al caso de uso para intentar a√±adir un nuevo √≠tem en la secci√≥n indicada.
        // Devuelve un Result<CheckListTemplateModel> que puede ser √©xito o error.
        val result =
            editorUseCases.addItem(
                template = current,
                sectionId = sectionId,
                title = title,
                action = action,
                infoTitle = infoTitle,
                infoBody = infoBody
            )


        return result.fold(
            // ‚úÖ √âxito: actualiza el estado con el nuevo template y retorna true
            onSuccess = { updatedTemplate ->
                _uiState.value = updatedTemplate
                true
            },
            // ‚ùå Error: intenta convertir el mensaje del error (String) a un ID de recurso (Int)
            onFailure = { throwable ->
                val resId = throwable.message?.toIntOrNull()

                // Si el mensaje era un recurso v√°lido, muestra un Toast con ese mensaje
                if (resId != null) {
                    showToast(resId)
                }
                // Retorna false indicando que la operaci√≥n fall√≥
                false
            }
        )
    }


    /** Actualiza la informaci√≥n de t√≠tulo y cuerpo del d√≠alo de info adicional de item.
    *
     * @param sectionId ID de la secci√≥n donde se encuentra el √≠tem.
     * @param itemId ID del √≠tem a actualizar.
     * @param infoTitle Nuevo t√≠tulo de la informaci√≥n adicional.
     * @param infoBody Nuevo contenido/cuerpo de la informaci√≥n adicional.
     */
    fun updateItemInfo(sectionId: String, itemId: String, infoTitle: String, infoBody: String) {
        // Genera una nueva lista de bloques actualizados
        val updatedBlocks = _uiState.value.blocks.map { block ->

            // Si el bloque es una secci√≥n y su ID coincide con el solicitado
            if (block is CheckListBlock.SectionBlock && block.section.id == sectionId) {

                // Se copia la secci√≥n con los bloques actualizados
                val updatedSection = block.section.copy(
                    blocks = block.section.blocks.map { subBlock ->

                        // Si el bloque es un √≠tem y su ID coincide con el solicitado
                        if (subBlock is CheckListBlock.ItemBlock && subBlock.item.id == itemId) {

                            // Se crea una copia del √≠tem con la nueva info
                            val updatedItem = subBlock.item.copy(
                                infoTitle = infoTitle,
                                infoBody = infoBody
                            )
                            // Se retorna un nuevo bloque con el √≠tem actualizado
                            CheckListBlock.ItemBlock(updatedItem)
                        } else subBlock   // Si no es el √≠tem buscado, se deja igual
                    }
                )
                // Se retorna una nueva secci√≥n con los bloques internos actualizados
                CheckListBlock.SectionBlock(updatedSection)
            } else block  // Si no es la secci√≥n buscada, se deja sin cambios
        }

        // Se actualiza el estado del ViewModel con la nueva lista de bloques
        _uiState.value = _uiState.value.copy(blocks = updatedBlocks)
    }

    /**
     * Actualiza la imagen asociada a un √≠tem dentro de una secci√≥n espec√≠fica.
     *
     * @param sectionId ID de la secci√≥n donde est√° el √≠tem.
     * @param itemId ID del √≠tem que se quiere modificar.
     * @param imageUri URI de la imagen seleccionada.
     * @param imageTitle T√≠tulo opcional de la imagen.
     * @param imageDescription Descripci√≥n opcional de la imagen.
     */
    fun updateItemImage(
        sectionId: String,
        itemId: String,
        imageUri: String,
        imageTitle: String = "",
        imageDescription: String = ""
    ) {
        val updatedBlocks = _uiState.value.blocks.map { block ->
            if (block is CheckListBlock.SectionBlock && block.section.id == sectionId) {
                val updatedSection = block.section.copy(
                    blocks = block.section.blocks.map { subBlock ->
                        if (subBlock is CheckListBlock.ItemBlock && subBlock.item.id == itemId) {
                            val updatedItem = subBlock.item.copy(
                                imageUri = imageUri,
                                imageTitle = imageTitle.takeIf { it.isNotBlank() },
                                imageDescription = imageDescription.takeIf { it.isNotBlank() }
                            )
                            CheckListBlock.ItemBlock(updatedItem)
                        } else subBlock
                    }
                )
                CheckListBlock.SectionBlock(updatedSection)
            } else block
        }

        _uiState.value = _uiState.value.copy(blocks = updatedBlocks)
    }

    fun toggleItemImportance(sectionId: String, itemId: String) {
        val updatedBlocks = _uiState.value.blocks.map { block ->
            if (block is CheckListBlock.SectionBlock && block.section.id == sectionId) {
                val updatedSection = block.section.copy(
                    blocks = block.section.blocks.map { subBlock ->
                        if (subBlock is CheckListBlock.ItemBlock && subBlock.item.id == itemId) {
                            val currentColor = subBlock.item.backgroundColorHex
                            val newColor = if (currentColor == "#FFF59D") {
                                "#D3D3D3" // original default
                            } else {
                                "#FFF59D" // amarillo pastel
                            }

                            val updatedItem = subBlock.item.copy(backgroundColorHex = newColor)
                            CheckListBlock.ItemBlock(updatedItem)
                        } else subBlock
                    }
                )
                CheckListBlock.SectionBlock(updatedSection)
            } else block
        }

        _uiState.value = _uiState.value.copy(blocks = updatedBlocks)
    }





    // ‚ûï A√±adir una nueva subsecci√≥n dentro de una secci√≥n existente del checklist.
    // Retorna true si se a√±adi√≥ correctamente, false si ocurri√≥ alg√∫n error.
    fun addSubsection(sectionId: String, title: String): Boolean {
        // Obtiene el estado actual del template desde el StateFlow
        val current = _uiState.value

        // Llama al caso de uso encargado de gestionar la l√≥gica de a√±adir la subsecci√≥n
        val result = editorUseCases.addSubsection(current, sectionId, title)

        // ‚úÖ Si fue exitoso, actualiza el estado global con la nueva plantilla modificada
        result.onSuccess { updatedTemplate ->
            _uiState.value = updatedTemplate
            return true

            // ‚ùå Si ocurri√≥ un error, intenta mostrar un mensaje mediante Toast
        }.onFailure { error ->
            showToast(error.message?.toIntOrNull() ?: R.string.generic_error)
        }

        return false
    }

    fun deleteItem(sectionId: String, itemId: String) {
        val updated =
            editorUseCases.deleteItem(_uiState.value, sectionId, itemId)
        _uiState.value = updated
    }

    fun deleteSection(sectionId: String) {
        val updated =
            editorUseCases.deleteSection(_uiState.value, sectionId)
        _uiState.value = updated
    }

    fun deleteSubsection(sectionId: String, subsectionId: String) {
        val updated =
            editorUseCases.deleteSubsection(_uiState.value, sectionId, subsectionId)
        _uiState.value = updated
    }

    // ‚úèÔ∏è Actualiza el t√≠tulo y la acci√≥n de un √≠tem existente dentro de una secci√≥n.
    // No retorna nada, pero actualiza el estado global si la operaci√≥n tiene √©xito.
    fun updateItem(sectionId: String, itemId: String, newTitle: String, newAction: String) {
        // ‚ùó Validaci√≥n: el t√≠tulo no puede estar vac√≠o
        if (newTitle.isBlank()) {
            showToast(R.string.error_title_cannot_be_empty)
            return
        }

        // ‚ùó Validaci√≥n: la acci√≥n tampoco puede estar vac√≠a
        if (newAction.isBlank()) {
            showToast(R.string.error_action_cannot_be_empty)
            return
        }

        // Obtiene el estado actual del template
        val currentTemplate = _uiState.value

        // Recorre todos los bloques (secciones) del template
        val updatedBlocks = currentTemplate.blocks.map { block ->

            // Busca la secci√≥n que contiene el √≠tem que queremos actualizar
            if (block is CheckListBlock.SectionBlock && block.section.id == sectionId) {

                // Utiliza el caso de uso para obtener la secci√≥n actualizada con el √≠tem modificado
                val updatedSection = editorUseCases.updateItem(
                    block.section,
                    itemId,
                    newTitle,
                    newAction
                )
                // Crea un nuevo bloque con la secci√≥n modificada
                CheckListBlock.SectionBlock(updatedSection)
            } else {
                // Si no es la secci√≥n que buscamos, la deja sin cambios
                block
            }
        }

        // Actualiza el estado global del template con la nueva lista de bloques
        _uiState.value = currentTemplate.copy(blocks = updatedBlocks)
    }

    fun toggleItemCompleted(sectionId: String, itemId: String) {
        val updated =
            editorUseCases.toggleItemCompletion(_uiState.value, sectionId, itemId)
        _uiState.value = updated
    }

    fun updateSectionTitle(sectionId: String, newTitle: String): Boolean {
        val result =
            editorUseCases.updateSectionTitle(_uiState.value, sectionId, newTitle)

        result.onSuccess { updated ->
            _uiState.value = updated
            return true
        }.onFailure { exception ->
            exception.message?.toIntOrNull()?.let { resId ->
                showToast(resId)
            }
        }

        return false
    }

    fun updateSubsectionTitle(subsectionId: String, newTitle: String): Boolean {
        val result =
            editorUseCases.updateSubsectionTitle(_uiState.value, subsectionId, newTitle)

        result.onSuccess { updated ->
            _uiState.value = updated
            return true
        }.onFailure { exception ->
            exception.message?.toIntOrNull()?.let { resId ->
                showToast(resId)
            }
        }

        return false
    }

    // Inicializa una nueva plantilla (CheckListTemplateModel) con valores iniciales
    fun initializeTemplate(
        name: String,
        model: String,
        airline: String,
        includeLogo: Boolean,
        sectionCount: Int,
        logoUri: Uri?
    ) {
        // Evita sobrescribir si la plantilla ya est√° cargada (√∫til al recomponer)
        if (_uiState.value.blocks.isNotEmpty()) return

        // Genera una lista de secciones vac√≠as con t√≠tulos "Section 1", "Section 2", etc.
        val sections = List(sectionCount) { index ->
            CheckListSection(title = "Section ${index + 1}")
        }

        // Convierte las secciones en bloques de tipo SectionBlock
        val blocks = sections.map { CheckListBlock.SectionBlock(it) }

        // Crea un nuevo estado para el template con todos los datos proporcionados
        _uiState.value = CheckListTemplateModel(
            name = name,
            aircraftModel = model,
            airline = airline,
            includeLogo = includeLogo,
            logoUri = logoUri,
            blocks = blocks
        )
    }

    private fun showToast(resId: Int) {
        viewModelScope.launch {
            _eventFlow.emit(UiEvent.ShowToast(resId))
        }
    }

    // Mueve un bloque (√≠tem o subsecci√≥n) dentro de una misma secci√≥n, de una posici√≥n a otra.
    fun moveBlockInSection(sectionId: String, fromIndex: Int, toIndex: Int) {

        // Recorre todos los bloques del template para encontrar la secci√≥n afectada
        val updatedBlocks = _uiState.value.blocks.map { block ->

            // Solo modifica si se trata de la secci√≥n que coincide con el ID
            if (block is CheckListBlock.SectionBlock && block.section.id == sectionId) {

                // Crea una copia mutable de los bloques internos de secci√≥n (√≠tems y subsecciones)
                val mutable = block.section.blocks.toMutableList()

                // Comprueba que los √≠ndices sean v√°lidos antes de hacer el cambio
                if (fromIndex in mutable.indices && toIndex in 0..mutable.size) {

                    // Extrae el bloque desde su posici√≥n original
                    val movedItem = mutable.removeAt(fromIndex)
                    // Lo inserta en la nueva posici√≥n
                    mutable.add(toIndex, movedItem)
                }
                // Crea una copia nueva de la secci√≥n con los bloques ya reordenados
                val updatedSection = block.section.copy(blocks = mutable)

                // Devuelve la secci√≥n reempaquetada como un nuevo SectionBlock
                CheckListBlock.SectionBlock(updatedSection)
            } else {
                // Para el resto de secciones, no hace ning√∫n cambio
                block
            }
        }
        // Actualiza el estado global con la nueva estructura de bloques
        _uiState.value = _uiState.value.copy(blocks = updatedBlocks)
    }

    fun addSection() {
        val updated = editorUseCases.addSectionUseCase(_uiState.value)
        _uiState.value = updated
    }

    /**
     * Exporta la checklist actual como JSON en el almacenamiento privado de la app.
     * Esta opci√≥n NO abre men√∫ de compartir ni genera notificaciones,
     * solo guarda el archivo internamente y notifica el resultado mediante UiEvent.
     */
    fun exportTemplateToJsonFile(context: Context) {
        viewModelScope.launch {
            val template = uiState.value

            val result = editorUseCases.exportToJsonUseCase(context, template)

            result.onSuccess { exportedFile ->
                // ‚úÖ Emitimos evento espec√≠fico para exportaci√≥n local exitosa
                _eventFlow.emit(UiEvent.ExportLocalSuccess(exportedFile))
            }.onFailure {
                _eventFlow.emit(UiEvent.ShowToast(R.string.export_failed))
            }
        }
    }




    /**
     * Exporta la checklist actual como JSON en la carpeta Descargas (MediaStore o almacenamiento privado en <29).
     * Muestra una notificaci√≥n con acciones ("Abrir" y "Compartir") y lanza un intent ACTION_SEND.
     *
     * @RequiresPermission POST_NOTIFICATIONS en Android 13+ para mostrar notificaciones.
     */

    @RequiresApi(Build.VERSION_CODES.Q)
    @RequiresPermission(Manifest.permission.POST_NOTIFICATIONS)
    fun exportAndShareTemplate(context: Context) {
        viewModelScope.launch {
            val template = uiState.value
            val jsonString = JsonUtils.json.encodeToString(template)
            val fileName = "plantilla_${template.name.ifBlank { "sin_nombre" }}.json"

            try {
                var exportUri: Uri? = null

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    // ‚úÖ Android 10+ ‚Üí Guardar en carpeta Descargas p√∫blica con MediaStore
                    val contentValues = ContentValues().apply {
                        put(MediaStore.Downloads.DISPLAY_NAME, fileName)
                        put(MediaStore.Downloads.MIME_TYPE, "application/json")
                        put(MediaStore.Downloads.IS_PENDING, 1)
                    }

                    val resolver = context.contentResolver
                    val downloadsUri = MediaStore.Downloads.EXTERNAL_CONTENT_URI
                    val uri = resolver.insert(downloadsUri, contentValues)

                    if (uri != null) {
                        resolver.openOutputStream(uri)?.use { outputStream ->
                            outputStream.write(jsonString.toByteArray())
                        }

                        // Marcar el archivo como listo
                        contentValues.clear()
                        contentValues.put(MediaStore.Downloads.IS_PENDING, 0)
                        resolver.update(uri, contentValues, null, null)

                        exportUri = uri
                    }

                } else {
                    // ‚úÖ Android 9 o inferior ‚Üí Guardar en almacenamiento privado externo
                    val file = File(
                        context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS),
                        fileName
                    )
                    file.writeText(jsonString)

                    exportUri = FileProvider.getUriForFile(
                        context,
                        "${context.packageName}.provider",
                        file
                    )
                }

                if (exportUri != null) {
                    // ‚úÖ Mostrar notificaci√≥n con acciones (Abrir carpeta y/o Compartir)
                    NotificationHelper.showExportWithActionsNotification(
                        context = context,
                        fileName = fileName,
                        fileUri = exportUri
                    )

                    // Opcional: mostrar un Toast tambi√©n
                    _eventFlow.emit(UiEvent.ShowToast(R.string.export_success_hint))

                } else {
                    _eventFlow.emit(UiEvent.ShowToast(R.string.export_failed))
                }

            } catch (e: Exception) {
                e.printStackTrace()
                _eventFlow.emit(UiEvent.ShowToast(R.string.export_failed))
            }
        }
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    @RequiresPermission(Manifest.permission.POST_NOTIFICATIONS)
    fun exportChecklistAsZipToDownloads(context: Context) {
        viewModelScope.launch {
            val template = uiState.value

            val result = editorUseCases.exportChecklistZipUseCase(context, template)

            result.onSuccess { (fileName, fileUri) ->
                // ‚úÖ Mostrar notificaci√≥n con acciones
                NotificationHelper.showExportWithActionsNotification(
                    context = context,
                    fileName = fileName,
                    fileUri = fileUri
                )

                _eventFlow.emit(UiEvent.ShowToast(R.string.export_success_hint))
            }.onFailure {
                _eventFlow.emit(UiEvent.ShowToast(R.string.export_failed))
            }
        }
    }












}